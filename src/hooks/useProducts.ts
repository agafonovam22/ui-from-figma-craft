import { useQuery } from '@tanstack/react-query';

export interface Product {
  id: string;
  name: string;
  price: number;
  original_price: number;
  discount_percentage: number;
  image_url: string;
  gallery_images?: string[];
  is_available: boolean;
  in_stock: boolean;
  quantity?: number;
  rating: number;
  reviews_count: number;
  characteristics: Record<string, string>;
}

interface ProductsResponse {
  status: string;
  products: Product[];
}

const fetchProducts = async (): Promise<Product[]> => {
  const response = await fetch('https://cp44652.tw1.ru/catalog.php');
  if (!response.ok) {
    throw new Error('Failed to fetch products');
  }
  const data: ProductsResponse = await response.json();
  
  // –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ —Ç–∏–ø—ã –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  if (data.products) {
    console.log('–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ:', data.products.length);
    const equipmentTypes = new Set();
    data.products.forEach(product => {
      if (product.characteristics['–¢–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è']) {
        equipmentTypes.add(product.characteristics['–¢–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è']);
      }
    });
    console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:', Array.from(equipmentTypes).sort());
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ —Ç–∏–ø–∞–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    const groupedByType: Record<string, string[]> = {};
    data.products.forEach(product => {
      const type = product.characteristics['–¢–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è'];
      if (type) {
        if (!groupedByType[type]) groupedByType[type] = [];
        groupedByType[type].push(product.name);
      }
    });
    console.log('–¢–æ–≤–∞—Ä—ã –ø–æ —Ç–∏–ø–∞–º:', groupedByType);
    
    // –ò—â–µ–º —Ç–æ–≤–∞—Ä—ã —Å–æ —Å–ª–æ–≤–æ–º "–∏–Ω–≤–µ—Ä—Å–∏–æ–Ω–Ω—ã–π" –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
    const inversionProducts = data.products.filter(product => 
      product.name.toLowerCase().includes('–∏–Ω–≤–µ—Ä—Å–∏–æ–Ω–Ω—ã–π')
    );
    console.log('–¢–æ–≤–∞—Ä—ã —Å "–∏–Ω–≤–µ—Ä—Å–∏–æ–Ω–Ω—ã–π" –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏:', inversionProducts.map(p => ({
      name: p.name,
      type: p.characteristics['–¢–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è']
    })));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è "–¢–∏–ø –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è"
    const purposeTypes = new Set();
    data.products.forEach(product => {
      if (product.characteristics['–¢–∏–ø –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è']) {
        purposeTypes.add(product.characteristics['–¢–∏–ø –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è']);
      }
    });
    console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:', Array.from(purposeTypes).sort());
  }
  
  return data.products || [];
};

// –ú–∞–ø–ø–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∫ —Ç–∏–ø–∞–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –∏–∑ –ë–∏—Ç—Ä–∏–∫—Å (–Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö API)
export const categoryMapping: Record<string, string[]> = {
  '–ë–µ–≥–æ–≤—ã–µ –¥–æ—Ä–æ–∂–∫–∏': [], // –ù–µ—Ç –≤ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö API
  '–≠–ª–ª–∏–ø—Ç–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–Ω–∞–∂–µ—Ä—ã': [], // –ù–µ—Ç –≤ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö API  
  '–í–µ–ª–æ—Ç—Ä–µ–Ω–∞–∂–µ—Ä—ã': [], // –ù–µ—Ç –≤ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö API
  '–ì—Ä–µ–±–Ω—ã–µ —Ç—Ä–µ–Ω–∞–∂–µ—Ä—ã': [], // –ù–µ—Ç –≤ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö API
  '–°–∏–ª–æ–≤—ã–µ —Ç—Ä–µ–Ω–∞–∂–µ—Ä—ã': [], // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
  '–ò–Ω–≤–µ—Ä—Å–∏–æ–Ω–Ω—ã–µ —Å—Ç–æ–ª—ã': [], // –£ –∏–Ω–≤–µ—Ä—Å–∏–æ–Ω–Ω—ã—Ö —Å—Ç–æ–ª–æ–≤ —Ç–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è undefined - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–∏—Å–∫ –ø–æ —Å–ª–æ–≤–∞–º
};

// –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ç–æ–≤–∞—Ä–∞ (fallback –∫–æ–≥–¥–∞ –Ω–µ—Ç —Ç–æ—á–Ω–æ–≥–æ —Ç–∏–ø–∞)
export const categoryKeywords: Record<string, string[]> = {
  '–ë–µ–≥–æ–≤—ã–µ –¥–æ—Ä–æ–∂–∫–∏': ['–±–µ–≥–æ–≤–∞—è', '–¥–æ—Ä–æ–∂–∫–∞', 'treadmill'],
  '–≠–ª–ª–∏–ø—Ç–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–Ω–∞–∂–µ—Ä—ã': ['—ç–ª–ª–∏–ø—Ç–∏—á–µ—Å–∫–∏–π', '—ç–ª–ª–∏–ø—Å', 'elliptical'],
  '–í–µ–ª–æ—Ç—Ä–µ–Ω–∞–∂–µ—Ä—ã': ['–≤–µ–ª–æ—Ç—Ä–µ–Ω–∞–∂–µ—Ä', '–≤–µ–ª–æ—Å–∏–ø–µ–¥', 'bike', 'cycling'],
  '–ì—Ä–µ–±–Ω—ã–µ —Ç—Ä–µ–Ω–∞–∂–µ—Ä—ã': ['–≥—Ä–µ–±–Ω–æ–π', 'rowing'],
  '–°–∏–ª–æ–≤—ã–µ —Ç—Ä–µ–Ω–∞–∂–µ—Ä—ã': ['—Å–∫–∞–º—å—è', '—Å—Ç–æ–π–∫–∞', '—Ä–∞–º–∞', '–º—É–ª—å—Ç–∏—Å—Ç–∞–Ω—Ü–∏—è', '–≥—Ä—É–∑–æ–±–ª–æ—á–Ω—ã–π', '—Å–º–∏—Ç–∞', '–∂–∏–º', '—Ç—è–≥–∞', '—Å–∏–ª–æ–≤–∞—è —Å—Ç–∞–Ω—Ü–∏—è', '—Ç—É—Ä–Ω–∏–∫', '–±—Ä—É—Å—å—è'],
  '–ò–Ω–≤–µ—Ä—Å–∏–æ–Ω–Ω—ã–µ —Å—Ç–æ–ª—ã': ['–∏–Ω–≤–µ—Ä—Å–∏–æ–Ω–Ω—ã–π'],
};

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–æ–≤–∞—Ä–∞–º
export const searchProducts = (products: Product[], searchQuery: string): Product[] => {
  if (!searchQuery.trim()) return products;
  
  const query = searchQuery.toLowerCase();
  console.log('üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É:', query);
  
  const filteredProducts = products.filter(product => {
    const productName = product.name.toLowerCase();
    const productCharacteristics = Object.values(product.characteristics || {}).join(' ').toLowerCase();
    
    const nameMatch = productName.includes(query);
    const characteristicsMatch = productCharacteristics.includes(query);
    const isMatch = nameMatch || characteristicsMatch;
    
    if (isMatch) {
      console.log('‚úÖ –ù–∞–π–¥–µ–Ω —Ç–æ–≤–∞—Ä:', {
        name: product.name,
        nameMatch,
        characteristicsMatch,
        characteristics: product.characteristics
      });
    }
    
    return isMatch;
  });
  
  console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ "${query}":`, {
    total: filteredProducts.length,
    products: filteredProducts.map(p => p.name)
  });
  
  return filteredProducts;
};

export const useProducts = (categoryFilter?: string) => {
  return useQuery({
    queryKey: ['products', categoryFilter],
    queryFn: fetchProducts,
    staleTime: 5 * 60 * 1000, // 5 minutes
    gcTime: 10 * 60 * 1000, // 10 minutes
    select: (data: Product[]) => {
      if (!categoryFilter) return data;
      
      // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è (–î–ª—è –¥–æ–º–∞ / –î–ª—è —Ñ–∏—Ç–Ω–µ—Å-–∫–ª—É–±–∞)
      if (categoryFilter === '–î–ª—è –¥–æ–º–∞') {
        return data.filter(product => 
          product.characteristics['–¢–∏–ø –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è'] === '–î–ª—è –¥–æ–º–∞' ||
          product.characteristics['–¢–∏–ø –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è'] === '–î–ª—è –¥–æ–º–∞;–î–ª—è —Ñ–∏—Ç–Ω–µ—Å-–∫–ª—É–±–æ–≤'
        );
      }
      
      if (categoryFilter === '–î–ª—è —Ñ–∏—Ç–Ω–µ—Å-–∫–ª—É–±–∞') {
        return data.filter(product => 
          product.characteristics['–¢–∏–ø –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è'] === '–î–ª—è —Ñ–∏—Ç–Ω–µ—Å-–∫–ª—É–±–æ–≤' ||
          product.characteristics['–¢–∏–ø –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è'] === '–î–ª—è –¥–æ–º–∞;–î–ª—è —Ñ–∏—Ç–Ω–µ—Å-–∫–ª—É–±–æ–≤'
        );
      }
      
      const equipmentTypes = categoryMapping[categoryFilter];
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ—á–Ω—ã–µ —Ç–∏–ø—ã –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
      if (equipmentTypes && equipmentTypes.length > 0) {
        return data.filter(product => 
          equipmentTypes.includes(product.characteristics['–¢–∏–ø –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è'])
        );
      }
      
      // –ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ—á–Ω—ã—Ö —Ç–∏–ø–æ–≤, –∏—â–µ–º –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
      const keywords = categoryKeywords[categoryFilter];
      if (keywords && keywords.length > 0) {
        return data.filter(product => {
          const productName = product.name.toLowerCase();
          return keywords.some(keyword => 
            productName.includes(keyword.toLowerCase())
          );
        });
      }
      
      // –ï—Å–ª–∏ –Ω–∏ —Ç–æ –Ω–∏ –¥—Ä—É–≥–æ–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
      return data;
    }
  });
};

// –•—É–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π query –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
export const useProductSearch = (searchQuery?: string) => {
  return useQuery({
    queryKey: ['products', 'search', searchQuery],
    queryFn: async () => {
      const data = await fetchProducts();
      console.log('–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ (—á–µ—Ä–µ–∑ useProductSearch):', data.length);
      return data;
    },
    staleTime: 5 * 60 * 1000,
    gcTime: 10 * 60 * 1000,
    select: (data: Product[]) => {
      if (!searchQuery) return data;
      return searchProducts(data, searchQuery);
    }
  });
};