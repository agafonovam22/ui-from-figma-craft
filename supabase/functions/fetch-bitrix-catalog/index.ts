import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    console.log('üîÑ –ü—Ä–æ–∫—Å–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ Bitrix API...');
    
    // –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ Bitrix API —á–µ—Ä–µ–∑ edge function (—ç—Ç–æ –æ–±—Ö–æ–¥–∏—Ç CORS)
    const bitrixResponse = await fetch('https://cp44652.tw1.ru/catalog.php');
    
    if (!bitrixResponse.ok) {
      throw new Error(`Bitrix API error: ${bitrixResponse.status} ${bitrixResponse.statusText}`);
    }
    
    const catalogData = await bitrixResponse.json();
    
    console.log(`üìä –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: ${catalogData.products?.length || 0} —Ç–æ–≤–∞—Ä–æ–≤, ${catalogData.categories?.length || 0} –∫–∞—Ç–µ–≥–æ—Ä–∏–π`);
    
    return new Response(JSON.stringify(catalogData), {
      headers: { 
        ...corsHeaders, 
        'Content-Type': 'application/json'
      },
    });
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö Bitrix:', error);
    
    return new Response(JSON.stringify({ 
      error: error.message,
      timestamp: new Date().toISOString()
    }), {
      status: 500,
      headers: { 
        ...corsHeaders, 
        'Content-Type': 'application/json'
      },
    });
  }
});